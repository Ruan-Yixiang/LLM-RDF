"use strict";

var _tslib = require("tslib");
var _util = require("@antv/util");
var _global = _interopRequireDefault(require("../../global"));
var _shape = _interopRequireDefault(require("../shape"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_shape.default.registerCombo('rect', {
  // 自定义 Combo 时的配置
  options: {
    size: [40, 5],
    padding: [25, 20, 15, 20],
    animate: true,
    style: {
      radius: 0,
      stroke: _global.default.defaultCombo.style.stroke,
      fill: _global.default.defaultCombo.style.fill,
      lineWidth: _global.default.defaultCombo.style.lineWidth
    },
    // 文本样式配置
    labelCfg: {
      style: {
        fill: _global.default.comboLabel.style.fill,
        fontSize: _global.default.comboLabel.style.fontSize,
        fontFamily: _global.default.windowFontFamily
      }
    },
    // 连接点，默认为左右
    anchorPoints: [[0, 0.5], [1, 0.5]],
    stateStyles: (0, _tslib.__assign)({}, _global.default.comboStateStyles),
    collapsedSubstituteIcon: {
      show: false,
      img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*RsnHRqLfJn4AAAAAAAAAAAAAARQnAQ'
    }
  },
  shapeType: 'rect',
  labelPosition: 'top',
  drawShape: function drawShape(cfg, group) {
    var style = this.getShapeStyle(cfg);
    var keyShape = group.addShape('rect', {
      attrs: style,
      className: 'rect-combo',
      name: 'rect-combo',
      draggable: true
    });
    return keyShape;
  },
  // 私有方法，不希望扩展的 Combo 复写这个方法
  getLabelStyleByPosition: function getLabelStyleByPosition(cfg, labelCfg) {
    var labelPosition = labelCfg.position || this.labelPosition;
    var cfgStyle = cfg.style;
    var padding = cfg.padding || this.options.padding;
    if ((0, _util.isNumber)(padding)) padding = [padding, padding, padding, padding];
    var refX = labelCfg.refX,
      refY = labelCfg.refY;
    // 考虑 refX 和 refY = 0 的场景，不用用 labelCfg.refX || Global.nodeLabel.refY
    if ((0, _util.isNil)(refX)) {
      refX = this.refX; // 不居中时的偏移量
    }

    if ((0, _util.isNil)(refY)) {
      refY = this.refY; // 不居中时的偏移量
    }

    var left = -cfgStyle.width / 2 - padding[3];
    var right = cfgStyle.width / 2 + padding[1];
    var top = -cfgStyle.height / 2 - padding[0];
    var bottom = cfgStyle.height / 2 + padding[2];
    var style;
    switch (labelPosition) {
      case 'top':
        style = {
          x: left + refX,
          y: top + refY,
          textBaseline: 'top',
          textAlign: 'left'
        };
        break;
      case 'bottom':
        style = {
          x: 0,
          y: bottom + refY,
          textBaseline: 'top',
          textAlign: 'center'
        };
        break;
      case 'left':
        style = {
          x: left + refY,
          y: 0,
          textAlign: 'left'
        };
        break;
      case 'center':
        style = {
          x: 0,
          y: 0,
          text: cfg.label,
          textAlign: 'center'
        };
        break;
      case 'top-center':
        style = {
          x: 0,
          y: top + refY,
          textBaseline: 'top',
          textAlign: 'center'
        };
        break;
      default:
        style = {
          x: right + refX,
          y: 0,
          textAlign: 'right'
        };
        break;
    }
    style.text = cfg.label;
    return style;
  },
  /**
   * 获取节点的样式，供基于该节点自定义时使用
   * @param {Object} cfg 节点数据模型
   * @return {Object} 节点的样式
   */
  getShapeStyle: function getShapeStyle(cfg) {
    var defaultStyle = this.options.style;
    var padding = cfg.padding || this.options.padding;
    if ((0, _util.isNumber)(padding)) padding = [padding, padding, padding, padding];
    var strokeStyle = {
      stroke: cfg.color
    };
    // 如果设置了color，则覆盖默认的stroke属性
    var style = (0, _util.mix)({}, defaultStyle, strokeStyle, cfg.style);
    var size = this.getSize(cfg);
    var width;
    var height;
    var fixSize = cfg.collapsed && cfg.fixCollapseSize ? cfg.fixCollapseSize : cfg.fixSize;
    if (fixSize) {
      if ((0, _util.isNumber)(fixSize)) {
        width = fixSize;
        height = fixSize;
      } else {
        width = fixSize[0];
        height = fixSize[1];
      }
    } else {
      if (!(0, _util.isNumber)(style.width) || isNaN(style.width)) width = size[0] || _global.default.defaultCombo.style.width;else width = Math.max(style.width, size[0]) || size[0];
      if (!(0, _util.isNumber)(style.height) || isNaN(style.height)) height = size[1] || _global.default.defaultCombo.style.height;else height = Math.max(style.height, size[1]) || size[1];
    }
    var x = -width / 2 - padding[3];
    var y = -height / 2 - padding[0];
    style.width = width + padding[1] + padding[3];
    style.height = height + padding[0] + padding[2];
    var styles = (0, _tslib.__assign)({
      x: x,
      y: y
    }, style);
    if (!cfg.style) {
      cfg.style = {
        width: width,
        height: height
      };
    } else {
      cfg.style.width = width;
      cfg.style.height = height;
    }
    return styles;
  },
  update: function update(cfg, item) {
    var size = this.getSize(cfg);
    var padding = cfg.padding || this.options.padding;
    if ((0, _util.isNumber)(padding)) padding = [padding, padding, padding, padding];
    var cfgStyle = (0, _util.clone)(cfg.style);
    var width, height;
    var fixSize = cfg.collapsed && cfg.fixCollapseSize ? cfg.fixCollapseSize : cfg.fixSize;
    if (fixSize) {
      if ((0, _util.isNumber)(fixSize)) {
        width = fixSize;
        height = fixSize;
      } else {
        width = fixSize[0];
        height = fixSize[1];
      }
    } else {
      width = Math.max(cfgStyle.width, size[0]) || size[0];
      height = Math.max(cfgStyle.height, size[1]) || size[1];
    }
    cfgStyle.width = width + padding[1] + padding[3];
    cfgStyle.height = height + padding[0] + padding[2];
    var itemCacheSize = item.get('sizeCache');
    if (itemCacheSize) {
      itemCacheSize.width = cfgStyle.width;
      itemCacheSize.height = cfgStyle.height;
    }
    cfgStyle.x = -width / 2 - padding[3];
    cfgStyle.y = -height / 2 - padding[0];
    // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。
    var strokeStyle = {
      stroke: cfg.color
    };
    // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。
    var keyShape = item.get('keyShape');
    var style = (0, _util.mix)({}, keyShape.attr(), strokeStyle, cfgStyle);
    if (cfg.style) {
      cfg.style.width = width;
      cfg.style.height = height;
    } else {
      cfg.style = {
        width: width,
        height: height
      };
    }
    this.updateShape(cfg, item, style, false);
  }
}, 'single-combo');