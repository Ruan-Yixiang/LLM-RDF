{"version":3,"file":"IRendererService.js","names":[],"sources":["../../../src/components/renderer/IRendererService.ts"],"sourcesContent":["import { Entity, GLSLContext } from '../..';\nimport { IAttribute, IAttributeInitializationOptions } from './IAttribute';\nimport { IBuffer, IBufferInitializationOptions } from './IBuffer';\nimport { IComputeModel } from './IComputeModel';\nimport { IElements, IElementsInitializationOptions } from './IElements';\nimport {\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n} from './IFramebuffer';\nimport { IModel, IModelInitializationOptions } from './IModel';\nimport { IPass } from './IMultiPassRenderer';\nimport { ITexture2D, ITexture2DInitializationOptions } from './ITexture2D';\n\nexport interface IScene {\n  getEntities(): Entity[];\n}\n\nexport interface IViewport {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface IRendererConfig {\n  canvas: HTMLCanvasElement;\n\n  /**\n   * Whether to use WGSL instead of GLSL 450\n   */\n  useWGSL?: boolean;\n\n  /**\n   * 是否开启 multi pass\n   */\n  enableMultiPassRenderer?: boolean;\n  passes?: Array<IPass<unknown>>;\n  antialias?: boolean;\n  preserveDrawingBuffer?: boolean;\n\n  /**\n   * Defines wether MSAA is enabled on the canvas.\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Whether to support ComputePipeline.\n   */\n  supportCompute?: boolean;\n}\n\nexport interface IClearOptions {\n  // gl.clearColor\n  color?: [number, number, number, number];\n  // gl.clearDepth 默认值为 1\n  depth?: number;\n  // gl.clearStencil 默认值为 0\n  stencil?: number;\n  // gl.bindFrameBuffer\n  framebuffer?: IFramebuffer | null;\n}\n\nexport interface IReadPixelsOptions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  // gl.bindFrameBuffer\n  framebuffer?: IFramebuffer;\n  data?: Uint8Array;\n}\n\nexport type BufferData =\n  | number\n  | number[]\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array;\n\nexport interface IRendererService {\n  supportWebGPU: boolean;\n  useWGSL: boolean;\n  init(cfg: IRendererConfig): Promise<void>;\n  clear(options: IClearOptions): void;\n  createModel(options: IModelInitializationOptions): Promise<IModel>;\n  createAttribute(options: IAttributeInitializationOptions): IAttribute;\n  createBuffer(options: IBufferInitializationOptions): IBuffer;\n  createElements(options: IElementsInitializationOptions): IElements;\n  createTexture2D(\n    options: ITexture2DInitializationOptions | HTMLImageElement,\n  ): ITexture2D;\n  createFramebuffer(options: IFramebufferInitializationOptions): IFramebuffer;\n  useFramebuffer(\n    framebuffer: IFramebuffer | null,\n    drawCommands: () => void,\n  ): void;\n  getCanvas(): HTMLCanvasElement;\n  getGLContext(): WebGLRenderingContext;\n  viewport(size: { x: number; y: number; width: number; height: number }): void;\n  readPixels(options: IReadPixelsOptions): Uint8Array;\n  setScissor(\n    scissor: Partial<{\n      enable: boolean;\n      box: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      };\n    }>,\n  ): void;\n  destroy(): void;\n  beginFrame(): void;\n  endFrame(): void;\n\n  // GPGPU\n  createComputeModel(context: GLSLContext): Promise<IComputeModel>;\n}\n"],"mappings":""}