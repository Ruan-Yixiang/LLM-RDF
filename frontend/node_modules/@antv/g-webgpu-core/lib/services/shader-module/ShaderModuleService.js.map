{"version":3,"file":"ShaderModuleService.js","names":["precisionRegExp","globalDefaultprecision","includeRegExp","ShaderModuleService","moduleCache","rawContentCache","destroy","moduleName","moduleParams","vs","fs","declaredUniforms","uniforms","extractUniforms","extractedVS","content","vsUniforms","extractedFS","fsUniforms","rawVS","rawFS","processModule","vsIncludeList","includeList","fsIncludeList","compiledFs","concat","reduce","prev","cur","test","trim","rawContent","type","compiled","replace","_","strMatch","includeOpt","split","includeName","indexOf","txt","push"],"sources":["../../../src/services/shader-module/ShaderModuleService.ts"],"sourcesContent":["import { uniq } from 'lodash';\nimport { extractUniforms } from '../../utils/shader-module';\nimport { IModuleParams, IShaderModuleService } from './IShaderModuleService';\n\nconst precisionRegExp = /precision\\s+(high|low|medium)p\\s+float/;\nconst globalDefaultprecision =\n  '#ifdef GL_FRAGMENT_PRECISION_HIGH\\n precision highp float;\\n #else\\n precision mediump float;\\n#endif\\n';\nconst includeRegExp = /#pragma include ([\"^+\"]?[\"\\ \"[a-zA-Z_0-9](.*)\"]*?)/g;\n\nexport default class ShaderModuleService implements IShaderModuleService {\n  private moduleCache: { [key: string]: IModuleParams } = {};\n  private rawContentCache: { [key: string]: IModuleParams } = {};\n\n  public registerBuiltinModules() {\n    this.destroy();\n  }\n\n  public registerModule(moduleName: string, moduleParams: IModuleParams) {\n    // prevent registering the same module multiple times\n    if (this.rawContentCache[moduleName]) {\n      return;\n    }\n\n    const { vs = '', fs = '', uniforms: declaredUniforms } = moduleParams;\n    const { content: extractedVS, uniforms: vsUniforms } = extractUniforms(vs);\n    const { content: extractedFS, uniforms: fsUniforms } = extractUniforms(fs);\n\n    this.rawContentCache[moduleName] = {\n      fs: extractedFS,\n      uniforms: {\n        ...vsUniforms,\n        ...fsUniforms,\n        ...declaredUniforms,\n      },\n      vs: extractedVS,\n    };\n  }\n  public destroy() {\n    this.moduleCache = {};\n    this.rawContentCache = {};\n  }\n  public getModule(moduleName: string): IModuleParams {\n    if (this.moduleCache[moduleName]) {\n      return this.moduleCache[moduleName];\n    }\n\n    const rawVS = this.rawContentCache[moduleName].vs || '';\n    const rawFS = this.rawContentCache[moduleName].fs || '';\n\n    const { content: vs, includeList: vsIncludeList } = this.processModule(\n      rawVS,\n      [],\n      'vs',\n    );\n    const { content: fs, includeList: fsIncludeList } = this.processModule(\n      rawFS,\n      [],\n      'fs',\n    );\n    let compiledFs = fs;\n    // TODO: extract uniforms and their default values from GLSL\n    const uniforms: {\n      [key: string]: any;\n    } = uniq(vsIncludeList.concat(fsIncludeList).concat(moduleName)).reduce(\n      (prev, cur: string) => {\n        return {\n          ...prev,\n          ...this.rawContentCache[cur].uniforms,\n        };\n      },\n      {},\n    );\n\n    /**\n     * set default precision for fragment shader\n     * https://stackoverflow.com/questions/28540290/why-it-is-necessary-to-set-precision-for-the-fragment-shader\n     */\n    if (!precisionRegExp.test(fs)) {\n      compiledFs = globalDefaultprecision + fs;\n    }\n\n    this.moduleCache[moduleName] = {\n      fs: compiledFs.trim(),\n      uniforms,\n      vs: vs.trim(),\n    };\n    return this.moduleCache[moduleName];\n  }\n\n  private processModule(\n    rawContent: string,\n    includeList: string[],\n    type: 'vs' | 'fs',\n  ): {\n    content: string;\n    includeList: string[];\n  } {\n    const compiled = rawContent.replace(includeRegExp, (_, strMatch) => {\n      const includeOpt = strMatch.split(' ');\n      const includeName = includeOpt[0].replace(/\"/g, '');\n\n      if (includeList.indexOf(includeName) > -1) {\n        return '';\n      }\n\n      const txt = this.rawContentCache[includeName][type];\n      includeList.push(includeName);\n\n      const { content } = this.processModule(txt || '', includeList, type);\n      return content;\n    });\n\n    return {\n      content: compiled,\n      includeList,\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;AACA;AAA4D;AAAA;AAG5D,IAAMA,eAAe,GAAG,wCAAwC;AAChE,IAAMC,sBAAsB,GAC1B,yGAAyG;AAC3G,IAAMC,aAAa,GAAG,qDAAqD;AAAC,IAEvDC,mBAAmB;EAAA;IAAA;IAAA,KAC9BC,WAAW,GAAqC,CAAC,CAAC;IAAA,KAClDC,eAAe,GAAqC,CAAC,CAAC;EAAA;EAAA;IAAA;IAAA,OAE9D,kCAAgC;MAC9B,IAAI,CAACC,OAAO,EAAE;IAChB;EAAC;IAAA;IAAA,OAED,wBAAsBC,UAAkB,EAAEC,YAA2B,EAAE;MACrE;MACA,IAAI,IAAI,CAACH,eAAe,CAACE,UAAU,CAAC,EAAE;QACpC;MACF;MAEA,uBAAyDC,YAAY,CAA7DC,EAAE;QAAFA,EAAE,iCAAG,EAAE;QAAA,mBAA0CD,YAAY,CAApDE,EAAE;QAAFA,EAAE,iCAAG,EAAE;QAAYC,gBAAgB,GAAKH,YAAY,CAA3CI,QAAQ;MAClC,uBAAuD,IAAAC,6BAAe,EAACJ,EAAE,CAAC;QAAzDK,WAAW,oBAApBC,OAAO;QAAyBC,UAAU,oBAApBJ,QAAQ;MACtC,wBAAuD,IAAAC,6BAAe,EAACH,EAAE,CAAC;QAAzDO,WAAW,qBAApBF,OAAO;QAAyBG,UAAU,qBAApBN,QAAQ;MAEtC,IAAI,CAACP,eAAe,CAACE,UAAU,CAAC,GAAG;QACjCG,EAAE,EAAEO,WAAW;QACfL,QAAQ,gDACHI,UAAU,GACVE,UAAU,GACVP,gBAAgB,CACpB;QACDF,EAAE,EAAEK;MACN,CAAC;IACH;EAAC;IAAA;IAAA,OACD,mBAAiB;MACf,IAAI,CAACV,WAAW,GAAG,CAAC,CAAC;MACrB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IAC3B;EAAC;IAAA;IAAA,OACD,mBAAiBE,UAAkB,EAAiB;MAAA;MAClD,IAAI,IAAI,CAACH,WAAW,CAACG,UAAU,CAAC,EAAE;QAChC,OAAO,IAAI,CAACH,WAAW,CAACG,UAAU,CAAC;MACrC;MAEA,IAAMY,KAAK,GAAG,IAAI,CAACd,eAAe,CAACE,UAAU,CAAC,CAACE,EAAE,IAAI,EAAE;MACvD,IAAMW,KAAK,GAAG,IAAI,CAACf,eAAe,CAACE,UAAU,CAAC,CAACG,EAAE,IAAI,EAAE;MAEvD,0BAAoD,IAAI,CAACW,aAAa,CACpEF,KAAK,EACL,EAAE,EACF,IAAI,CACL;QAJgBV,EAAE,uBAAXM,OAAO;QAAmBO,aAAa,uBAA1BC,WAAW;MAKhC,2BAAoD,IAAI,CAACF,aAAa,CACpED,KAAK,EACL,EAAE,EACF,IAAI,CACL;QAJgBV,EAAE,wBAAXK,OAAO;QAAmBS,aAAa,wBAA1BD,WAAW;MAKhC,IAAIE,UAAU,GAAGf,EAAE;MACnB;MACA,IAAME,QAEL,GAAG,oBAAKU,aAAa,CAACI,MAAM,CAACF,aAAa,CAAC,CAACE,MAAM,CAACnB,UAAU,CAAC,CAAC,CAACoB,MAAM,CACrE,UAACC,IAAI,EAAEC,GAAW,EAAK;QACrB,uCACKD,IAAI,GACJ,KAAI,CAACvB,eAAe,CAACwB,GAAG,CAAC,CAACjB,QAAQ;MAEzC,CAAC,EACD,CAAC,CAAC,CACH;;MAED;AACJ;AACA;AACA;MACI,IAAI,CAACZ,eAAe,CAAC8B,IAAI,CAACpB,EAAE,CAAC,EAAE;QAC7Be,UAAU,GAAGxB,sBAAsB,GAAGS,EAAE;MAC1C;MAEA,IAAI,CAACN,WAAW,CAACG,UAAU,CAAC,GAAG;QAC7BG,EAAE,EAAEe,UAAU,CAACM,IAAI,EAAE;QACrBnB,QAAQ,EAARA,QAAQ;QACRH,EAAE,EAAEA,EAAE,CAACsB,IAAI;MACb,CAAC;MACD,OAAO,IAAI,CAAC3B,WAAW,CAACG,UAAU,CAAC;IACrC;EAAC;IAAA;IAAA,OAED,uBACEyB,UAAkB,EAClBT,WAAqB,EACrBU,IAAiB,EAIjB;MAAA;MACA,IAAMC,QAAQ,GAAGF,UAAU,CAACG,OAAO,CAACjC,aAAa,EAAE,UAACkC,CAAC,EAAEC,QAAQ,EAAK;QAClE,IAAMC,UAAU,GAAGD,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;QACtC,IAAMC,WAAW,GAAGF,UAAU,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;QAEnD,IAAIZ,WAAW,CAACkB,OAAO,CAACD,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;UACzC,OAAO,EAAE;QACX;QAEA,IAAME,GAAG,GAAG,MAAI,CAACrC,eAAe,CAACmC,WAAW,CAAC,CAACP,IAAI,CAAC;QACnDV,WAAW,CAACoB,IAAI,CAACH,WAAW,CAAC;QAE7B,2BAAoB,MAAI,CAACnB,aAAa,CAACqB,GAAG,IAAI,EAAE,EAAEnB,WAAW,EAAEU,IAAI,CAAC;UAA5DlB,OAAO,wBAAPA,OAAO;QACf,OAAOA,OAAO;MAChB,CAAC,CAAC;MAEF,OAAO;QACLA,OAAO,EAAEmB,QAAQ;QACjBX,WAAW,EAAXA;MACF,CAAC;IACH;EAAC;EAAA;AAAA;AAAA"}