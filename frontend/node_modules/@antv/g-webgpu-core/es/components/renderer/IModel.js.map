{"version":3,"file":"IModel.js","names":[],"sources":["../../../src/components/renderer/IModel.ts"],"sourcesContent":["import { gl } from './gl';\nimport type { IAttribute } from './IAttribute';\nimport type { IElements } from './IElements';\nimport type { IUniform } from './IUniform';\n\nexport interface IBlendOptions {\n  // gl.enable(gl.BLEND)\n  enable: boolean;\n  // gl.blendFunc\n  func: BlendingFunctionSeparate;\n  // gl.blendEquation\n  equation: {\n    rgb:\n      | gl.FUNC_ADD\n      | gl.FUNC_SUBTRACT\n      | gl.FUNC_REVERSE_SUBTRACT\n      | gl.MIN_EXT\n      | gl.MAX_EXT;\n    alpha?:\n      | gl.FUNC_ADD\n      | gl.FUNC_SUBTRACT\n      | gl.FUNC_REVERSE_SUBTRACT\n      | gl.MIN_EXT\n      | gl.MAX_EXT;\n  };\n  // gl.blendColor\n  color: [number, number, number, number];\n}\ntype stencilOp =\n  | gl.ZERO\n  | gl.KEEP\n  | gl.REPLACE\n  | gl.INVERT\n  | gl.INCR\n  | gl.DECR\n  | gl.INCR_WRAP\n  | gl.DECR_WRAP;\n\ntype BlendingFunctionCombined = Partial<{\n  src:\n    | gl.ZERO\n    | gl.ONE\n    | gl.SRC_COLOR\n    | gl.ONE_MINUS_SRC_COLOR\n    | gl.SRC_ALPHA\n    | gl.ONE_MINUS_SRC_ALPHA\n    | gl.DST_COLOR\n    | gl.ONE_MINUS_DST_COLOR\n    | gl.DST_ALPHA\n    | gl.ONE_MINUS_DST_ALPHA\n    | gl.CONSTANT_COLOR\n    | gl.ONE_MINUS_CONSTANT_COLOR\n    | gl.CONSTANT_ALPHA\n    | gl.ONE_MINUS_CONSTANT_ALPHA\n    | gl.SRC_ALPHA_SATURATE;\n  dst:\n    | gl.ZERO\n    | gl.ONE\n    | gl.SRC_COLOR\n    | gl.ONE_MINUS_SRC_COLOR\n    | gl.SRC_ALPHA\n    | gl.ONE_MINUS_SRC_ALPHA\n    | gl.DST_COLOR\n    | gl.ONE_MINUS_DST_COLOR\n    | gl.DST_ALPHA\n    | gl.ONE_MINUS_DST_ALPHA\n    | gl.CONSTANT_COLOR\n    | gl.ONE_MINUS_CONSTANT_COLOR\n    | gl.CONSTANT_ALPHA\n    | gl.ONE_MINUS_CONSTANT_ALPHA\n    | gl.SRC_ALPHA_SATURATE;\n}>;\n\ntype BlendingFunctionSeparate = Partial<{\n  srcRGB:\n    | gl.ZERO\n    | gl.ONE\n    | gl.SRC_COLOR\n    | gl.ONE_MINUS_SRC_COLOR\n    | gl.SRC_ALPHA\n    | gl.ONE_MINUS_SRC_ALPHA\n    | gl.DST_COLOR\n    | gl.ONE_MINUS_DST_COLOR\n    | gl.DST_ALPHA\n    | gl.ONE_MINUS_DST_ALPHA\n    | gl.CONSTANT_COLOR\n    | gl.ONE_MINUS_CONSTANT_COLOR\n    | gl.CONSTANT_ALPHA\n    | gl.ONE_MINUS_CONSTANT_ALPHA\n    | gl.SRC_ALPHA_SATURATE;\n  srcAlpha: number;\n  dstRGB:\n    | gl.ZERO\n    | gl.ONE\n    | gl.SRC_COLOR\n    | gl.ONE_MINUS_SRC_COLOR\n    | gl.SRC_ALPHA\n    | gl.ONE_MINUS_SRC_ALPHA\n    | gl.DST_COLOR\n    | gl.ONE_MINUS_DST_COLOR\n    | gl.DST_ALPHA\n    | gl.ONE_MINUS_DST_ALPHA\n    | gl.CONSTANT_COLOR\n    | gl.ONE_MINUS_CONSTANT_COLOR\n    | gl.CONSTANT_ALPHA\n    | gl.ONE_MINUS_CONSTANT_ALPHA\n    | gl.SRC_ALPHA_SATURATE;\n  dstAlpha: number;\n}>;\n\nexport interface IModelInitializationOptions {\n  /**\n   * Shader 字符串，假设此时已经经过 ShaderLib 处理\n   */\n  vs: string;\n  fs: string;\n\n  defines?: Record<string, number | boolean>;\n\n  uniforms?: {\n    [key: string]: IUniform;\n  };\n\n  attributes: {\n    [key: string]: IAttribute;\n  };\n\n  /**\n   * gl.POINTS | gl.TRIANGLES | ...\n   * 默认值 gl.TRIANGLES\n   */\n  primitive?:\n    | gl.POINTS\n    | gl.LINES\n    | gl.LINE_LOOP\n    | gl.LINE_STRIP\n    | gl.TRIANGLES\n    | gl.TRIANGLE_FAN\n    | gl.TRIANGLE_STRIP;\n  // 绘制的顶点数目\n  count?: number;\n  // 默认值为 0\n  offset?: number;\n\n  /**\n   * gl.drawElements\n   */\n  elements?: IElements;\n  /**\n   * 绘制实例数目\n   */\n  instances?: number;\n\n  colorMask?: [boolean, boolean, boolean, boolean];\n\n  /**\n   * depth buffer\n   */\n  depth?: Partial<{\n    // gl.enable(gl.DEPTH_TEST)\n    enable: boolean;\n    // gl.depthMask\n    mask: boolean;\n    // gl.depthFunc\n    func:\n      | gl.NEVER\n      | gl.ALWAYS\n      | gl.LESS\n      | gl.LEQUAL\n      | gl.GREATER\n      | gl.GEQUAL\n      | gl.EQUAL\n      | gl.NOTEQUAL;\n    // gl.depthRange\n    range: [0, 1];\n  }>;\n\n  /**\n   * blending\n   */\n  blend?: Partial<IBlendOptions>;\n\n  /**\n   * stencil\n   */\n  stencil?: Partial<{\n    // gl.enable(gl.STENCIL_TEST)\n    enable: boolean;\n    // gl.stencilMask\n    mask: number;\n    func: {\n      cmp:\n        | gl.NEVER\n        | gl.ALWAYS\n        | gl.LESS\n        | gl.LEQUAL\n        | gl.GREATER\n        | gl.GEQUAL\n        | gl.EQUAL\n        | gl.NOTEQUAL;\n      ref: number;\n      mask: number;\n    };\n    opFront: {\n      fail: stencilOp;\n      zfail: stencilOp;\n      zpass: stencilOp;\n    };\n    opBack: {\n      fail: stencilOp;\n      zfail: stencilOp;\n      zpass: stencilOp;\n    };\n  }>;\n\n  /**\n   * cull\n   */\n  cull?: Partial<{\n    // gl.enable(gl.CULL_FACE)\n    enable: boolean;\n    // gl.cullFace\n    face: gl.FRONT | gl.BACK;\n  }>;\n\n  scissor?: Partial<{\n    enable: boolean;\n    box: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  }>;\n}\n\nexport interface IModelDrawOptions {\n  uniforms?: {\n    [key: string]: IUniform;\n  };\n\n  attributes?: {\n    [key: string]: IAttribute;\n  };\n  elements?: IElements;\n\n  blend?: IBlendOptions;\n}\n\n/**\n * 类似 THREE.Mesh，不同之处在于可以不依赖 THREE.Scene，单独执行封装的渲染命令。\n * 这些命令包括：\n * * 执行 Shader Program\n * * 开启/控制 WebGL 状态(gl.enable)例如 depth/stencil buffer、blending、cull 等\n * * 销毁资源，例如 buffer texture 等\n */\nexport interface IModel {\n  addUniforms(uniforms: { [key: string]: IUniform }): void;\n  draw(options: IModelDrawOptions): void;\n  destroy(): void;\n}\n"],"mappings":""}